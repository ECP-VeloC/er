PROJECT(ER)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

# Mac rpath Policy
IF(POLICY CMP0042)
          CMAKE_POLICY(SET CMP0042 NEW)
ENDIF(POLICY CMP0042)
SET(CMAKE_MACOSX_RPATH ON)

# Linux rpath settings
SET(CMAKE_SKIP_BUILD_RPATH FALSE)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

SET(CMAKE_POSITION_INDEPENDENT_CODE ON)

#SET(CMAKE_C_FLAGS "-Wall")

# Configuration Options
OPTION(BUILD_SHARED_LIBS "Whether to build shared libraries" ON)
MESSAGE(STATUS "BUILD_SHARED_LIBS: ${BUILD_SHARED_LIBS}")

if (BUILD_SHARED_LIBS)
   OPTION(ER_LINK_STATIC "Default to static linking? (Needed for Cray)" OFF)
else()
   OPTION(ER_LINK_STATIC "Default to static linking? (Needed for Cray)" ON)
endif()
MESSAGE(STATUS "ER_LINK_STATIC: ${ER_LINK_STATIC}")

OPTION(ENABLE_TESTS "Whether to build tests" ON)
MESSAGE(STATUS "ENABLE_TESTS: ${ENABLE_TESTS}")

# Find Packages & Files

LIST(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")

## ZLIB
FIND_PACKAGE(ZLIB REQUIRED)
IF(ZLIB_FOUND)
    INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIRS})
    LIST(APPEND ER_EXTERNAL_LIBS ${ZLIB_LIBRARIES})
    LIST(APPEND ER_SERIAL_LIBS ${ZLIB_LIBRARIES})
    LIST(APPEND ER_LINK_LINE "-lz")
ENDIF(ZLIB_FOUND)

## REDSET
FIND_PACKAGE(REDSET REQUIRED)
IF(REDSET_FOUND)
	INCLUDE_DIRECTORIES(${REDSET_INCLUDE_DIRS})
	LIST(APPEND ER_EXTERNAL_LIBS ${REDSET_LIBRARIES})
	LIST(APPEND ER_LINK_LINE "-lredset")
ENDIF(REDSET_FOUND)

## SHUFFILE
FIND_PACKAGE(SHUFFILE REQUIRED)
IF(SHUFFILE_FOUND)
	INCLUDE_DIRECTORIES(${SHUFFILE_INCLUDE_DIRS})
	LIST(APPEND ER_EXTERNAL_LIBS ${SHUFFILE_LIBRARIES})
	LIST(APPEND ER_LINK_LINE "-lshuffile")
ENDIF(SHUFFILE_FOUND)

## KVTREE
FIND_PACKAGE(KVTREE REQUIRED)
IF(KVTREE_FOUND)
	INCLUDE_DIRECTORIES(${KVTREE_INCLUDE_DIRS})
	LIST(APPEND ER_EXTERNAL_LIBS ${KVTREE_LIBRARIES})
	LIST(APPEND ER_LINK_LINE "-lkvtree")
ENDIF(KVTREE_FOUND)

## RANKSTR
## only needed for the test
FIND_PACKAGE(RANKSTR REQUIRED)
IF(RANKSTR_FOUND)
	INCLUDE_DIRECTORIES(${RANKSTR_INCLUDE_DIRS})
	LIST(APPEND ER_EXTERNAL_LIBS ${RANKSTR_LIBRARIES})
	LIST(APPEND ER_LINK_LINE "-lrankstr")
ENDIF(RANKSTR_FOUND)

## MPI
INCLUDE(SetupMPI)
IF(MPI_C_FOUND)
    INCLUDE_DIRECTORIES(${MPI_C_INCLUDE_PATH})
    LIST(APPEND ER_EXTERNAL_LIBS ${MPI_C_LIBRARIES})
ELSE(MPI_C_FOUND)
    MESSAGE(FATAL_ERROR
        "Could not find MPI! "
        "Either add an MPI compiler to your path "
        "or force CMake to build using the correct compiler (`export CC=mpicc`). "
        "To disable MPI, set -DMPI=OFF")
ENDIF(MPI_C_FOUND)

## HEADERS
INCLUDE(CheckIncludeFile)
INCLUDE(GNUInstallDirs)

# Subdirectories
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/src)
ADD_SUBDIRECTORY(src)

IF(ENABLE_TESTS)
   INCLUDE(CTest)
   INCLUDE(ER_ADD_TEST)
   ADD_SUBDIRECTORY(test)
ENDIF(ENABLE_TESTS)

# Generate config.h with all our build #defs
CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/cmake/config.h.in ${PROJECT_BINARY_DIR}/config.h)
SET_SOURCE_FILES_PROPERTIES(config.h.in PROPERTIES GENERATED FALSE)
SET_SOURCE_FILES_PROPERTIES(${PROJECT_BINARY_DIR}/config.h PROPERTIES GENERATED TRUE)

# Special Install Files
# INSTALL(FILES README.md DESTINATION ${CMAKE_INSTALL_DATADIR}/kvtree)

# Package
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Encode/Rebuild library for a set of files")
SET(CPACK_PACKAGE_VENDOR "Lawrence Livermore National Laboratory")
# SET(CPACK_PACKAGE_DESCRIPTION_FILE "${PROJECT_SOURCE_DIR}/README.md")
# SET(CPACK_RESOURCE_FILE_LICENSE "${PROJECT_SOURCE_DIR}/LICENSE.TXT")
